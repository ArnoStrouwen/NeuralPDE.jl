var documenterSearchIndex = {"docs":
[{"location":"examples/blackscholes/#Solving-the-100-dimensional-Black-Scholes-Barenblatt-Equation-1","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"","category":"section"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"Black Scholes equation is a model for stock option price. In 1973, Black and Scholes transformed their formula on option pricing and corporate liabilities into a PDE model, which is widely used in financing engineering for computing the option price over time. [1.] In this example we will solve a Black-Scholes-Barenblatt equation of 100 dimensions. The Black-Scholes-Barenblatt equation is a nonlinear extension to the Black-Scholes equation which models uncertain volatility and interest rates derived from the Black-Scholes equation. This model results in a nonlinear PDE whose dimension is the number of assets in the portfolio.","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"To solve it using the TerminalPDEProblem, we write:","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"d = 100 # number of dimensions\nX0 = repeat([1.0f0, 0.5f0], div(d,2)) # initial value of stochastic state\ntspan = (0.0f0,1.0f0)\nr = 0.05f0\nsigma = 0.4f0\nf(X,u,σᵀ∇u,p,t) = r * (u - sum(X.*σᵀ∇u))\ng(X) = sum(X.^2)\nμ_f(X,p,t) = zero(X) #Vector d x 1\nσ_f(X,p,t) = Diagonal(sigma*X) #Matrix d x d\nprob = TerminalPDEProblem(g, f, μ_f, σ_f, X0, tspan)","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"As described in the API docs, we now need to define our NNPDENS algorithm by giving it the Flux.jl chains we want it to use for the neural networks. u0 needs to be a d dimensional -> 1 dimensional chain, while σᵀ∇u needs to be d+1 dimensional to d dimensions. Thus we define the following:","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"hls  = 10 + d #hide layer size\nopt = Flux.ADAM(0.001)\nu0 = Flux.Chain(Dense(d,hls,relu),\n                Dense(hls,hls,relu),\n                Dense(hls,1))\nσᵀ∇u = Flux.Chain(Dense(d+1,hls,relu),\n                  Dense(hls,hls,relu),\n                  Dense(hls,hls,relu),\n                  Dense(hls,d))\npdealg = NNPDENS(u0, σᵀ∇u, opt=opt)","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"And now we solve the PDE. Here we say we want to solve the underlying neural SDE using the Euler-Maruyama SDE solver with our chosen dt=0.2, do at most 150 iterations of the optimizer, 100 SDE solves per loss evaluation (for averaging), and stop if the loss ever goes below 1f-6.","category":"page"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"ans = solve(prob, pdealg, verbose=true, maxiters=150, trajectories=100,\n                            alg=EM(), dt=0.2, pabstol = 1f-6)","category":"page"},{"location":"examples/blackscholes/#Reference-1","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Reference","text":"","category":"section"},{"location":"examples/blackscholes/#","page":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","title":"Solving the 100 dimensional Black-Scholes-Barenblatt Equation","text":"Shinde, A. S., and K. C. Takale. \"Study of Black-Scholes model and its applications.\" Procedia Engineering 38 (2012): 270-279.","category":"page"},{"location":"examples/nnrode_example/#Solving-Random-Ordinary-Differential-Equations-1","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"","category":"section"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"In this tutorial we will solve a RODE with NNRODE . Consider the equation","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"du = f(uptW)dt","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"where f(uptW)=2usin(W) and W(t) is a Noise process.","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"f = (u,p,t,W) ->   2u*sin(W)\ntspan = (0.00f0, 1.00f0)\nu0 = 1.0f0\ndt = 1/20f0","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"We start off by defining the NoiseProcess W(t) . In this case we define a simple Gaussian Process. See Noise Processes for defining other types of process.","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"W = WienerProcess(0.0,0.0,nothing)","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"Then we need to define our model, in order to define a model we can use Flux.chain or DiffEqFlux.FastChain","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"chain = Flux.Chain(Dense(2,5,elu),Dense(5,1)) #Model using Flux","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"chain = FastChain(FastDense(2,50,tanh), FastDense(50,2)) #Model using DiffEqFlux","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"And lets define our optimiser function :","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"opt = ADAM(1e-3)","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"Now lets pass all parameters to the algorithm and then call the solver. If we already have some initial parameters we can pass them into the NNRODE as well.","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"alg = NNRODE(chain , W , opt , init_params)","category":"page"},{"location":"examples/nnrode_example/#","page":"Solving Random Ordinary Differential Equations","title":"Solving Random Ordinary Differential Equations","text":"sol = solve(prob, NeuralPDE.NNRODE(chain,W,opt), dt=dt, verbose = true,\n            abstol=1e-10, maxiters = 15000)","category":"page"},{"location":"examples/100_HJB/#Solving-a-100-dimensional-Hamilton-Jacobi-Bellman-Equation-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"First, here's a fully working code for the solution of a 100-dimensional Hamilton-Jacobi-Bellman equation that takes a few minutes on a laptop:","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"using NeuralPDE\nusing Flux\nusing DifferentialEquations\nusing LinearAlgebra\nd = 100 # number of dimensions\nX0 = fill(0.0f0, d) # initial value of stochastic control process\ntspan = (0.0f0, 1.0f0)\nλ = 1.0f0\n\ng(X) = log(0.5f0 + 0.5f0 * sum(X.^2))\nf(X,u,σᵀ∇u,p,t) = -λ * sum(σᵀ∇u.^2)\nμ_f(X,p,t) = zero(X)  # Vector d x 1 λ\nσ_f(X,p,t) = Diagonal(sqrt(2.0f0) * ones(Float32, d)) # Matrix d x d\nprob = TerminalPDEProblem(g, f, μ_f, σ_f, X0, tspan)\nhls = 10 + d # hidden layer size\nopt = Flux.ADAM(0.01)  # optimizer\n# sub-neural network approximating solutions at the desired point\nu0 = Flux.Chain(Dense(d, hls, relu),\n                Dense(hls, hls, relu),\n                Dense(hls, 1))\n# sub-neural network approximating the spatial gradients at time point\nσᵀ∇u = Flux.Chain(Dense(d + 1, hls, relu),\n                  Dense(hls, hls, relu),\n                  Dense(hls, hls, relu),\n                  Dense(hls, d))\npdealg = NNPDENS(u0, σᵀ∇u, opt=opt)\n@time ans = solve(prob, pdealg, verbose=true, maxiters=100, trajectories=100,\n                            alg=EM(), dt=1.2, pabstol=1f-2)","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"Now let's explain the details!","category":"page"},{"location":"examples/100_HJB/#H-J-B-equation-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"H-J-B equation","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"The Hamilton-Jacobi-Bellman equation is the solution to a stochastic optimal control problem.","category":"page"},{"location":"examples/100_HJB/#Symbolic-Solution-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Symbolic Solution","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"Here, we choose to solve the classical Linear Quadratic Gaussian (LQG) control problem of 100 dimensions, which is governed by the SDE dX_t = 2sqrt(λ)c_t dt + sqrt(2)dW_t where c_t is a control process. The solution to the optimal control is given by a PDE of the form:","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"(Image: HJB)","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"with terminating condition g(X) = log(0.5f0 + 0.5f0*sum(X.^2)).","category":"page"},{"location":"examples/100_HJB/#Solving-LQG-Problem-with-Neural-Net-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving LQG Problem with Neural Net","text":"","category":"section"},{"location":"examples/100_HJB/#Define-the-Problem-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Define the Problem","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"To get the solution above using the TerminalPDEProblem, we write:","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"d = 100 # number of dimensions\nX0 = fill(0.0f0,d) # initial value of stochastic control process\ntspan = (0.0f0, 1.0f0)\nλ = 1.0f0\n\ng(X) = log(0.5f0 + 0.5f0*sum(X.^2))\nf(X,u,σᵀ∇u,p,t) = -λ*sum(σᵀ∇u.^2)\nμ_f(X,p,t) = zero(X)  #Vector d x 1 λ\nσ_f(X,p,t) = Diagonal(sqrt(2.0f0)*ones(Float32,d)) #Matrix d x d\nprob = TerminalPDEProblem(g, f, μ_f, σ_f, X0, tspan)","category":"page"},{"location":"examples/100_HJB/#Define-the-Solver-Algorithm-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Define the Solver Algorithm","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"As described in the API docs, we now need to define our NNPDENS algorithm by giving it the Flux.jl chains we want it to use for the neural networks. u0 needs to be a d dimensional -> 1 dimensional chain, while σᵀ∇u needs to be d+1 dimensional to d dimensions. Thus we define the following:","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"hls = 10 + d #hidden layer size\nopt = Flux.ADAM(0.01)  #optimizer\n#sub-neural network approximating solutions at the desired point\nu0 = Flux.Chain(Dense(d,hls,relu),\n                Dense(hls,hls,relu),\n                Dense(hls,1))\n# sub-neural network approximating the spatial gradients at time point\nσᵀ∇u = Flux.Chain(Dense(d+1,hls,relu),\n                  Dense(hls,hls,relu),\n                  Dense(hls,hls,relu),\n                  Dense(hls,d))\npdealg = NNPDENS(u0, σᵀ∇u, opt=opt)","category":"page"},{"location":"examples/100_HJB/#Solving-with-Neural-Net-1","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving with Neural Net","text":"","category":"section"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"@time ans = solve(prob, pdealg, verbose=true, maxiters=100, trajectories=100,\n                            alg=EM(), dt=0.2, pabstol = 1f-2)\n","category":"page"},{"location":"examples/100_HJB/#","page":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","title":"Solving a 100-dimensional Hamilton-Jacobi-Bellman Equation","text":"Here we want to solve the underlying neural SDE using the Euler-Maruyama SDE solver with our chosen dt=0.2, do at most 100 iterations of the optimizer, 100 SDE solves per loss evaluation (for averaging), and stop if the loss ever goes below 1f-2.","category":"page"},{"location":"solvers/optimal_stopping/#Neural-Network-Solvers-for-Optimal-Stopping-Time-Problems-1","page":"Neural Network Solvers for Optimal Stopping Time Problems","title":"Neural Network Solvers for Optimal Stopping Time Problems","text":"","category":"section"},{"location":"solvers/optimal_stopping/#","page":"Neural Network Solvers for Optimal Stopping Time Problems","title":"Neural Network Solvers for Optimal Stopping Time Problems","text":"TODO","category":"page"},{"location":"solvers/pinn/#Physics-Informed-Neural-Networks-1","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"","category":"section"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"Using PINNs solver, we might solve general nonlinear PDEs:","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"(Image: generalPDE)","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"with suitable boundary conditions:","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"(Image: bcs)","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"Where time t is as a special component of x, and Ω contains the temporal domain.","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"We describe the PDE in the form of the ModelingToolKit interface. See an example of how this can be done above or take a look at the tests.","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"General PDE Problem can be defined using a PDESystem:","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"PDESystem(eq,bcs,domains,param,var)","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"Here, eq is equation, bcs is boundary conditions, param is parameter of eqution (like [x,y]) and var is varibles (like [u]).","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"The method discretize do interpret from ModelingToolkit PDE form to the PINNs Problem.","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"discretize(pde_system, discretization)","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"To solve this problem use NNDE algorithm.","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"NNDE(chain,opt, autodiff=false)","category":"page"},{"location":"solvers/pinn/#","page":"Physics-Informed Neural Networks","title":"Physics-Informed Neural Networks","text":"Here, chain is a Flux.jl chain with d dimensional input and 1 dimensional output. opt is a Flux.jl optimizer. And autodiff is a boolean variable that determines whether to use automatic differentiation(not supported while) or numerical.","category":"page"},{"location":"solvers/deep_fbsde/#Deep-Forward-Backwards-SDEs-for-Terminal-Parabolic-PDEs-1","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"","category":"section"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"To solve high dimensional PDEs, first one should describe the PDE in terms of the TerminalPDEProblem with constructor:","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"TerminalPDEProblem(g,f,μ_f,σ_f,X0,tspan,p=nothing)","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"which describes the semilinear parabolic PDE of the form:","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"(Image: paraPDE)","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"with terminating condition u(tspan[2],x) = g(x). These methods solve the PDE in reverse, satisfying the terminal equation and giving a point estimate at u(tspan[1],X0). The dimensionality of the PDE is determined by the choice of X0, which is the initial stochastic state.","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"To solve this PDE problem, there exists two algorithms:","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"NNPDENS(u0,σᵀ∇u;opt=Flux.ADAM(0.1)): Uses a neural stochastic differential equation which is then solved by the methods available in DifferentialEquations.jl The alg keyword is required for specifying the SDE solver algorithm that will be used on the internal SDE. All of the other keyword arguments are passed to the SDE solver.\nNNPDEHan(u0,σᵀ∇u;opt=Flux.ADAM(0.1)): Uses the stochastic RNN algorithm from Han. Only applicable when μ_f and σ_f result in a non-stiff SDE where low order non-adaptive time stepping is applicable.","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"Here, u0 is a Flux.jl chain with d dimensional input and 1 dimensional output. For NNPDEHan, σᵀ∇u is an array of M chains with d dimensional input and d dimensional output, where M is the total number of timesteps. For NNPDENS it is a d+1 dimensional input (where the final value is time) and d dimensional output. opt is a Flux.jl optimizer.","category":"page"},{"location":"solvers/deep_fbsde/#","page":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","title":"Deep Forward-Backwards SDEs for Terminal Parabolic PDEs","text":"Each of these methods has a special keyword argument pabstol which specifies an absolute tolerance on the PDE's solution, and will exit early if the loss reaches this value. Its defualt value is 1f-6.","category":"page"},{"location":"solvers/ode/#ODE-Specialized-Physics-Informed-Neural-Solver-1","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"","category":"section"},{"location":"solvers/ode/#","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"The ODE-specialized physics-informed neural network (PINN) solver is a method for the DifferentialEquations.jl common interface of ODEProblem which generates the solution via a neural network. Thus the standard ODEProblem is used, but a new algorithm, NNODE is utilized to solve the problem.","category":"page"},{"location":"solvers/ode/#","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"The algorithm type is:","category":"page"},{"location":"solvers/ode/#","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"nnode(chain,opt)","category":"page"},{"location":"solvers/ode/#","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"where chain is a DiffEqFlux sciml_train compatible Chain or FastChain representing a neural network, and opt is an optimization method for sciml_train. For more details, see the DiffEqFlux documentation on sciml_train.","category":"page"},{"location":"solvers/ode/#","page":"ODE-Specialized Physics Informed Neural Solver","title":"ODE-Specialized Physics Informed Neural Solver","text":"Lagaris, Isaac E., Aristidis Likas, and Dimitrios I. Fotiadis. \"Artificial neural networks for solving ordinary and partial differential equations.\" IEEE Transactions on Neural Networks 9, no. 5 (1998): 987-1000.","category":"page"},{"location":"examples/pinns_example/#Physics-Informed-Neural-Networks-solver-1","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"","category":"section"},{"location":"examples/pinns_example/#Example-1:-Solving-the-2-dimensional-Poisson-Equation-1","page":"Physics-Informed Neural Networks solver","title":"Example 1: Solving the 2-dimensional Poisson Equation","text":"","category":"section"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"In this example we will solve a Poisson equation of 2 dimensions:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: poisson)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"with boundary conditions:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: boundary)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"on the space domain:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: spaces)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"with grid discretization dx = 0.1.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"The ModelingToolkit PDE interface for this example looks like this:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"@parameters x y θ\n@variables u(..)\n@derivatives Dxx''~x\n@derivatives Dyy''~y\n\n# 2D PDE\neq  = Dxx(u(x,y,θ)) + Dyy(u(x,y,θ)) ~ -sin(pi*x)*sin(pi*y)\n\n# Boundary conditions\nbcs = [u(0,y,θ) ~ 0.f0, u(1,y,θ) ~ -sin(pi*1)*sin(pi*y),\n       u(x,0,θ) ~ 0.f0, u(x,1,θ) ~ -sin(pi*x)*sin(pi*1)]\n# Space and time domains\ndomains = [x ∈ IntervalDomain(0.0,1.0),\n           y ∈ IntervalDomain(0.0,1.0)]\n# Discretization\ndx = 0.1\ndiscretization = PhysicsInformedNN(dx)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"Here, we define the neural network and optimizer, where the input of NN equals the number of dimensions and output equals the number of equations in the system.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"# Neural network and optimizer\nopt = Flux.ADAM(0.02)\ndim = 2 # number of dimensions\nchain = FastChain(FastDense(dim,16,Flux.σ),FastDense(16,16,Flux.σ),FastDense(16,1))","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"As described in the API docs, we now need to define NNDE algorithm by giving it the Flux.jl chains we want it to use for the neural networks. Also, we need to define PDESystem and then pass it to the method discretize.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"pde_system = PDESystem(eq,bcs,domains,[x,y],[u])\nprob = discretize(pde_system,discretization)\nalg = NNDE(chain,opt,autodiff=false)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"And now we can solve the PDE using PINNs. At do a number of epochs maxiters=5000.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"phi,res  = solve(prob,alg,verbose=true, maxiters=5000)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"We can plot the predicted solution of the PDE and compare it with the analytical solution in order to plot the relative error.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"xs,ys = [domain.domain.lower:dx/10:domain.domain.upper for domain in domains]\nanalytic_sol_func(x,y) = (sin(pi*x)*sin(pi*y))/(2pi^2)\n\nu_predict = reshape([first(phi([x,y],res.minimizer)) for x in xs for y in ys],(length(xs),length(ys)))\nu_real = reshape([analytic_sol_func(x,y) for x in xs for y in ys], (length(xs),length(ys)))\ndiff_u = abs.(u_predict .- u_real)\n\nusing Plots\np1 = plot(xs, ys, u_real, linetype=:contourf,title = \"analytic\");\np2 = plot(xs, ys, u_predict, linetype=:contourf,title = \"predict\");\np3 = plot(xs, ys, diff_u,linetype=:contourf,title = \"error\");\nplot(p1,p2,p3)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: poissonplot)","category":"page"},{"location":"examples/pinns_example/#Example-2-:-Solving-the-2-dimensional-Wave-Equation-with-Neumann-boundary-condition-1","page":"Physics-Informed Neural Networks solver","title":"Example 2 : Solving the 2-dimensional Wave Equation with Neumann boundary condition","text":"","category":"section"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"Let's solve this 2d wave equation:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: wave)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"with grid discretization dx = 0.1.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"Further, the solution of this equation with the given boundary conditions is presented.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"@parameters x, t, θ\n@variables u(..)\n@derivatives Dxx''~x\n@derivatives Dtt''~t\n@derivatives Dt'~t\n\n#2D PDE\nC=1\neq  = Dtt(u(x,t,θ)) ~ C^2*Dxx(u(x,t,θ))\n\n# Initial and boundary conditions\nbcs = [u(0,t,θ) ~ 0.,# for all t > 0\n       u(1,t,θ) ~ 0.,# for all t > 0\n       u(x,0,θ) ~ x*(1. - x), #for all 0 < x < 1\n       Dt(u(x,0,θ)) ~ 0. ] #for all  0 < x < 1]\n\n# Space and time domains\ndomains = [x ∈ IntervalDomain(0.0,1.0),\n           t ∈ IntervalDomain(0.0,1.0)]\n# Discretization\ndx = 0.1\ndiscretization = NeuralPDE.PhysicsInformedNN(dx)\n\n# Neural network and optimizer\nopt = Flux.ADAM(0.02)\nchain = FastChain(FastDense(2,16,Flux.σ),FastDense(16,16,Flux.σ),FastDense(16,1))\n\npde_system = PDESystem(eq,bcs,domains,[x,t],[u])\nprob = NeuralPDE.discretize(pde_system,discretization)\nalg = NeuralPDE.NNDE(chain,opt,autodiff=false)\nphi,res  = solve(prob,alg,verbose=true, maxiters=5000)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"We can plot the predicted solution of the PDE and compare it with the analytical solution in order to plot the relative error.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"xs,ts = [domain.domain.lower:dx:domain.domain.upper for domain in domains]\nanalytic_sol_func(x,t) =  sum([(8/(k^3*pi^3)) * sin(k*pi*x)*cos(C*k*pi*t) for k in 1:2:50000])\n\nu_predict = reshape([first(phi([x,t],res.minimizer)) for x in xs for t in ts],(length(xs),length(ts)))\nu_real = reshape([analytic_sol_func(x,t) for x in xs for t in ts], (length(xs),length(ts)))\n\ndiff_u = abs.(u_predict .- u_real)\np1 = plot(xs, ts, u_real, linetype=:contourf,title = \"analytic\");\np2 =plot(xs, ts, u_predict, linetype=:contourf,title = \"predict\");\np3 = plot(xs, ts, diff_u,linetype=:contourf,title = \"error\");\nplot(p1,p2,p3)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: waveplot)","category":"page"},{"location":"examples/pinns_example/#Example-3-:-Solving-System-of-PDE-and-Matrix-PDEs-form-1","page":"Physics-Informed Neural Networks solver","title":"Example 3 : Solving System of PDE and Matrix PDEs form","text":"","category":"section"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"In this example we will solve the linear PDE system","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: pdesystem)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"with grid discretization dx = 0.1.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"@parameters x, y, θ\n@variables u1(..), u2(..)\n@derivatives Dx'~x\n@derivatives Dy'~y\n\n# System of pde\neqs = [Dx(u1(x,y,θ)) + 4*Dy(u2(x,y,θ)) ~ 0,\n      Dx(u2(x,y,θ)) + 9*Dy(u1(x,y,θ)) ~ 0]\n\n# Initial and boundary conditions\nbcs = [[u1(x,0,θ) ~ 2x, u2(x,0,θ) ~ 3x]]\n\n# Space and time domains\ndomains = [x ∈ IntervalDomain(0.0,1.0), y ∈ IntervalDomain(0.0,1.0)]\n\n# Discretization\ndx = 0.1\ndiscretization = NeuralPDE.PhysicsInformedNN(dx)\n\n# Neural network and optimizer\nopt = Flux.ADAM(0.1)\nchain = FastChain(FastDense(2,8,Flux.σ),FastDense(8,2))\n\npde_system = PDESystem(eqs,bcs,domains,[x,y],[u1,u2])\nprob = NeuralPDE.discretize(pde_system,discretization)\nalg = NeuralPDE.NNDE(chain,opt,autodiff=false)\nphi,res = solve(prob,alg,verbose=true, maxiters=500)","category":"page"},{"location":"examples/pinns_example/#Matrix-PDEs-form-1","page":"Physics-Informed Neural Networks solver","title":"Matrix PDEs form","text":"","category":"section"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"Also, in addition to systems, we can use the matrix form of PDEs:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"@parameters x y θ\n@variables u[1:2,1:2](..)\n@derivatives Dxx''~x\n@derivatives Dyy''~y\n\n# matrix PDE\neqs  = @. [(Dxx(u_(x,y,θ)) + Dyy(u_(x,y,θ))) for u_ in u] ~ -sin(pi*x)*sin(pi*y)*[0 1; 0 1]\n\n# Initial and boundary conditions\nbcs = [[u[1](x,0,θ) ~ x u[2](x,0,θ) ~ 2;\n        u[3](x,0,θ) ~ 3 u[4](x,0,θ) ~ 4]]","category":"page"},{"location":"examples/pinns_example/#Example-4-:-Solving-ODE-with-3rd-order-derivative-1","page":"Physics-Informed Neural Networks solver","title":"Example 4 : Solving ODE with 3rd order derivative","text":"","category":"section"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"Let's consider ODE with 3rd order derivative:","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: hdode)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"with grid discretization dx = 0.1.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"@parameters x θ\n@variables u(..)\n@derivatives Dxxx'''~x\n@derivatives Dx'~x\n\n#ODE\neq = Dxxx(u(x,θ)) ~ cos(pi*x)\n\n# Initial and boundary conditions\nbcs = [u(0.,θ) ~ 0.0,\n       u(1.,θ) ~ cos(pi),\n       Dx(u(1.,θ)) ~ 1.0]\n\n\n# Space and time domains\ndomains = [x ∈ IntervalDomain(0.0,1.0)]\n\n# Discretization\ndx = 0.1\ndiscretization = NeuralPDE.PhysicsInformedNN(dx)\n\n# Neural network and optimizer\nopt = Flux.ADAM(0.01)\nchain = FastChain(FastDense(1,8,Flux.σ),FastDense(8,1))\n\npde_system = PDESystem(eq,bcs,domains,[x],[u])\nprob = NeuralPDE.discretize(pde_system,discretization)\nalg = NeuralPDE.NNDE(chain,opt,autodiff=false)\nphi,res = solve(prob,alg,verbose=true, maxiters=1000)","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"We can plot the predicted solution of the PDE and its analytical solution.","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"analytic_sol_func(x) = (π*x*(-x+(π^2)*(2*x-3)+1)-sin(π*x))/(π^3)\nxs = [domain.domain.lower:dx/10:domain.domain.upper for domain in domains][1]\nu_real  = [analytic_sol_func(x) for x in xs]\nu_predict  = [first(phi(x,res.minimizer)) for x in xs]\n\nx_plot = collect(xs)\nplot(x_plot ,u_real,label = \"real\" )\nplot!(x_plot ,u_predict, label = \"predict\")","category":"page"},{"location":"examples/pinns_example/#","page":"Physics-Informed Neural Networks solver","title":"Physics-Informed Neural Networks solver","text":"(Image: hodeplot)","category":"page"},{"location":"examples/optimal_stopping_american/#Optimal-Stopping-Times-of-American-Options-1","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"","category":"section"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"Here we will aim to solve an optimal stopping problem using NNStopping algorithm.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"Let us consider a standard American options. Unlike European options , American options can be excersiced before their maturity and thus the problem reduces to finding an optimal stopping time.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"As stated above since we can execute the option at any optimal time before the maturity of the option the standard Black-Scholes model gets modified to :","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"  fracVt + rSfracVS + frac12σ^2S^2frac^2 VS^2 -rV  0","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"And since the stock price will follow a standard geometric brownian motion given by :","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"  dS_t = rS_tdt + σS_tdW_t","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"And thus our final aim will be to calculate: <img src=\"https://raw.githubusercontent.com/ashutosh-b-b/github-doc-images/master/Price%20of%20American%20Option.png\">","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"We will be using a SDEProblem to denote a problem of this type. Since we can define this as a SDEProblem and add a terminal condition g in order to price the American Options","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"We will take the case of an American max put option with strike price K , constant volatility β and risk-free rate r . Intitial stock price u0 = 80.00 , the maturity T and number of steps as N. The forcing function f and noise function sigma are defined for the type of model. See StochasticDiffEq documentation.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"d = 1 #Dimensions of initial stock price\nr = 0.04f0\nbeta = 0.2f0\nK = 100.00\nT = 1.0\nu0 = fill(80.00 , d , 1) #Initial Stock Price\n#Defining the drift (f) and diffusion(sigma)\nf(du,u,p,t) = (du .= r*u)\nsigma(du,u,p,t)  = (du .= Diagonal(beta*u))\n\ntspan = (0.0 , T)\nN = 50\ndt = tspan[2]/(N - 1)","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"The final part is the payoff function :","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"<img src=\"https://raw.githubusercontent.com/ashutosh-b-b/github-doc-images/master/payoff_function.png\">","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"The discounted payoff function is :","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"function g(t , x)\n  return exp(-r*t)*(max(K -  maximum(x)  , 0))\nend","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"Now in order to define an optimal stopping problem we will use a SDEProblem and pass the discounted payoff function gas an kwarg.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"prob  = SDEProblem(f , sigma , u0 , tspan ; g = g)","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"And finally lets build our neural network model using Flux.jl. Note that the final layer should be the softmax (Flux.softmax)  function as we need the sum of probabilities at all stopping times to be 1. And then add an optimiser function.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"m = Chain(Dense(d , 5, tanh), Dense(5, 16 , tanh)  , Dense(16 , N ), softmax)\nopt = Flux.ADAM(0.1)","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"We add algorithms to solve the SDE and the Ensemble.These are the algorithms required to solve the SDEProblem (we use the Euler-Maruyama algorithm in this case) and an EnsembleProblem to run multiple simulations. See Ensemble Algorithms.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"sdealg = EM()\nensemblealg = EnsembleThreads()","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"And finally we call the solve function.","category":"page"},{"location":"examples/optimal_stopping_american/#","page":"Optimal Stopping Times of American Options","title":"Optimal Stopping Times of American Options","text":"sol = solve(prob, NeuralPDE.NNStopping( m, opt , sdealg , ensemblealg), verbose = true, dt = dt,\n            abstol=1e-6, maxiters = 20 , trajectories = 200)\n","category":"page"},{"location":"examples/ode/#Solving-ODEs-with-Neural-Networks-1","page":"Solving ODEs with Neural Networks","title":"Solving ODEs with Neural Networks","text":"","category":"section"},{"location":"examples/ode/#","page":"Solving ODEs with Neural Networks","title":"Solving ODEs with Neural Networks","text":"The following is an example of solving a DifferentialEquations.jl ODEProblem with a neural network using the physics-informed neural networks approach specialized to 1-dimensional PDEs (ODEs).","category":"page"},{"location":"examples/ode/#","page":"Solving ODEs with Neural Networks","title":"Solving ODEs with Neural Networks","text":"using Flux, Optim\nusing NeuralPDE\n# Run a solve on scalars\nlinear = (u, p, t) -> cos(2pi * t)\ntspan = (0.0f0, 1.0f0)\nu0 = 0.0f0\nprob = ODEProblem(linear, u0, tspan)\nchain = Flux.Chain(Dense(1, 5, σ), Dense(5, 1))\nopt = Flux.ADAM(0.1, (0.9, 0.95))\n@time sol = solve(prob, NeuralPDE.NNODE(chain, opt), dt=1 / 20f0, verbose=true,\n            abstol=1e-10, maxiters=200)","category":"page"},{"location":"examples/kolmogorovbackwards/#Solving-Kolmogorov-Equations-with-Neural-Networks-1","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"","category":"section"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"A Kolmogorov PDE is of the form :","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"(Image: KPDE)","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"Consider S be a solution process to the SDE:","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"(Image: StochasticP)","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"then the solution to the Kolmogorov PDE is given as:","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"(Image: Solution)","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"A Kolmogorov PDE Problem can be defined using a SDEProblem:","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"SDEProblem(μ,σ,u0,tspan,xspan,d)","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"Here u0 is the initial distribution of x. Here we define u(0,x) as the probability density function of u0.μ and σ are obtained from the SDE for the stochastic process above. d represents the dimenstions of x. u0 can be defined using Distributions.jl.","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"Another was of defining a KolmogorovPDE is using the KolmogorovPDEProblem.","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"KolmogorovPDEProblem(μ,σ,phi,tspan,xspan,d)","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"Here phi is the initial condition on u(t,x) when t = 0. μ and σ are obtained from the SDE for the stochastic process above. d represents the dimenstions of x.","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"To solve this problem use,","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"NNKolmogorov(chain, opt , sdealg): Uses a neural network to realise a regression function which is the solution for the linear Kolmogorov Equation.","category":"page"},{"location":"examples/kolmogorovbackwards/#","page":"Solving Kolmogorov Equations with Neural Networks","title":"Solving Kolmogorov Equations with Neural Networks","text":"Here, chain is a Flux.jl chain with d dimensional input and 1 dimensional output.opt is a Flux.jl optimizer. And sdealg is a high-order algorithm to calculate the solution for the SDE, which is used to define the learning data for the problem. Its default value is the classic Euler-Maruyama algorithm.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#Neural-Network-Solvers-for-Kolmogorov-Backwards-Equations-1","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"","category":"section"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"A Kolmogorov PDE is of the form :","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"(Image: )","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Considering S be a solution process to the SDE:","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"(Image: )","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"then the solution to the Kolmogorov PDE is given as:","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"(Image: )","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"A Kolmogorov PDE Problem can be defined using a SDEProblem:","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"SDEProblem(μ,σ,u0,tspan,xspan,d)","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Here u0 is the initial distribution of x. Here we define u(0,x) as the probability density function of u0.μ and σ are obtained from the SDE for the stochastic process above. d represents the dimenstions of x. u0 can be defined using Distributions.jl.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Another was of defining a KolmogorovPDE is using the KolmogorovPDEProblem.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"KolmogorovPDEProblem(μ,σ,phi,tspan,xspan,d)","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Here phi is the initial condition on u(t,x) when t = 0. μ and σ are obtained from the SDE for the stochastic process above. d represents the dimenstions of x.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"To solve this problem use,","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"NNKolmogorov(chain, opt , sdealg): Uses a neural network to realise a regression function which is the solution for the linear Kolmogorov Equation.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Here, chain is a Flux.jl chain with d dimensional input and 1 dimensional output.opt is a Flux.jl optimizer. And sdealg is a high-order algorithm to calculate the solution for the SDE, which is used to define the learning data for the problem. Its default value is the classic Euler-Maruyama algorithm.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#Using-GPU-for-Kolmogorov-Equations-1","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Using GPU for Kolmogorov Equations","text":"","category":"section"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"For running Kolmogorov Equations on a GPU there are somethings that are needed to be taken care of :","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Convert the model parameters to CuArrays using the fmap function given by Flux.jl","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"m = Chain(Dense(1, 64, σ), Dense(64, 64, σ) , Dense(5, 2))\nm = fmap(cu, m)","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"Unlike other solver we need to specify explicitly to the solver to run on the GPU. This can be done by passing the use_gpu = true  into the solver.","category":"page"},{"location":"solvers/kolmogorovbackwards_solver/#","page":"Neural Network Solvers for Kolmogorov Backwards Equations","title":"Neural Network Solvers for Kolmogorov Backwards Equations","text":"solve(prob, NeuralPDE.NNKolmogorov(m, opt, sdealg, ensemblealg), use_gpu = true,  verbose = true, dt = dt, dx = dx , trajectories = trajectories , abstol=1e-6, maxiters = 1000)","category":"page"},{"location":"#NeuralPDE.jl:-Scientific-Machine-Learning-for-Partial-Differential-Equations-1","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"NeuralPDE.jl: Scientific Machine Learning for Partial Differential Equations","text":"","category":"section"},{"location":"#","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","text":"NeuralPDE.jl is a solver package which consists neural network solvers for partial differential equations using scientific machine learning (SciML) techniques such as physics-informed neural networks (PINNs) and deep BSDE solvers. This package utilizes deep neural networks and neural stochastic differential equations to solve high dimensional PDEs at a greatly reduced cost and greatly increased generality compared to classical methods.","category":"page"},{"location":"#Features-1","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"Features","text":"","category":"section"},{"location":"#","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","text":"Physics-Informed Neural Networks for automated PDE solving\nForward-Backwards Stochastic Differential Equation (FBSDE) methods for parabolic PDEs\nDeep learning based solvers for optimal stopping time and Kolmogorov backwards equations","category":"page"},{"location":"#Citation-1","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"Citation","text":"","category":"section"},{"location":"#","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","text":"If you use NeuralPDE.jl in your work, please cite:","category":"page"},{"location":"#","page":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","title":"NeuralPDE.jl: Scientific Machine Learning (SciML) for Partial Differential Equations","text":"@article{DifferentialEquations.jl-2017,\n author = {Rackauckas, Christopher and Nie, Qing},\n doi = {10.5334/jors.151},\n journal = {The Journal of Open Research Software},\n keywords = {Applied Mathematics},\n note = {Exported from https://app.dimensions.ai on 2019/05/05},\n number = {1},\n pages = {},\n title = {DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia},\n url = {https://app.dimensions.ai/details/publication/pub.1085583166 and http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/galley/245/download/},\n volume = {5},\n year = {2017}\n}","category":"page"}]
}
